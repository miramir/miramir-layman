--- gmrun-0.9.2.orig/src/main.cc	2012-05-14 00:53:27.459602992 +0600
+++ gmrun-0.9.2/src/main.cc	2012-05-14 00:14:50.652792796 +0600
@@ -9,12 +9,13 @@
  *      option, and provided that this copyright notice remains intact.
  *****************************************************************************/
 
+#include <X11/Xlib.h>
 
 #include <gtk/gtk.h>
 #include <gdk/gdkkeysyms.h>
+#include <gdk/gdkx.h>
 
 #include <string>
-#include <cstring>
 #include <iostream>
 #include <sstream>
 #include <vector>
@@ -158,7 +159,7 @@
 {
   string prog;
   std::vector<char*> argv;
- 
+
   string cmd = command + ' ';
   istringstream iss(cmd);
 #ifdef DEBUG
@@ -281,10 +282,10 @@
 on_compline_runwithterm(GtkCompletionLine *cl, struct gigi* g)
 {
   string command(g_locale_from_utf8 (gtk_entry_get_text(GTK_ENTRY(cl)),
-				     -1,
-				     NULL,
-				     NULL,
-				     NULL));
+                     -1,
+                     NULL,
+                     NULL,
+                     NULL));
   string tmp;
   string term;
 
@@ -389,10 +390,10 @@
 url_check(GtkCompletionLine *cl, struct gigi *g)
 {
   string text(g_locale_from_utf8 (gtk_entry_get_text(GTK_ENTRY(cl)),
-				  -1,
-				  NULL,
-				  NULL,
-				  NULL));
+                  -1,
+                  NULL,
+                  NULL,
+                  NULL));
 
   string::size_type i;
   string::size_type sp;
@@ -491,10 +492,10 @@
     return;
 
   string command = g_locale_from_utf8 (gtk_entry_get_text(GTK_ENTRY(cl)),
-				       -1,
-				       NULL,
-				       NULL,
-				       NULL);
+                       -1,
+                       NULL,
+                       NULL,
+                       NULL);
 
   string::size_type i;
   i = command.find_first_not_of(" \t");
@@ -523,13 +524,184 @@
   }
 }
 
+/**
+ Check if screen contain ponter and return coords
+ Taked from Xfce: libxfcegui4
+ */
+static gboolean
+screen_contains_pointer (GdkScreen *screen,
+                         int       *x,
+                         int       *y)
+{
+    GdkWindow    *root_window;
+    Window        root, child;
+    Bool          retval;
+    int           rootx, rooty;
+    int           winx, winy;
+    unsigned int  xmask;
+
+    root_window = gdk_screen_get_root_window (screen);
+
+    retval = XQueryPointer (GDK_SCREEN_XDISPLAY (screen),
+                            GDK_DRAWABLE_XID (root_window),
+                            &root, &child, &rootx, &rooty,
+                            &winx, &winy, &xmask);
+
+    if (x)
+        *x = retval ? rootx : -1;
+    if (y)
+        *y = retval ? rooty : -1;
+
+    return retval;
+}
+
+/**
+ Found monitor that contain mouse pointer
+ Taked from Xfce: libxfcegui4
+ */
+static GdkScreen*
+gmrun_gdk_display_locate_monitor_with_pointer (GdkDisplay *display,
+                                               gint       *monitor_return)
+{
+    int n_screens, i;
+
+    if (display == NULL)
+        display = gdk_display_get_default ();
+
+    n_screens = gdk_display_get_n_screens (display);
+    for (i = 0; i < n_screens; i++)
+    {
+        GdkScreen  *screen;
+        int         x, y;
+
+        screen = gdk_display_get_screen (display, i);
+
+        if (screen_contains_pointer (screen, &x, &y))
+        {
+            if (monitor_return)
+                *monitor_return = gdk_screen_get_monitor_at_point (screen, x, y);
+
+            return screen;
+        }
+    }
+
+    if (monitor_return)
+        *monitor_return = 0;
+
+    return NULL;
+}
+
+/**
+ Center window on given monitor
+  Taked from Xfce: libxfcegui4
+ */
+static void
+//gmrun_gtk_window_center_on_monitor (GtkWindow *window,
+gmrun_gtk_window_place_on_monitor (GtkWindow *window,
+                                   GdkScreen *screen,
+                                   gint       monitor,
+                                   int        request_x = -1,
+                                   int        request_y = -1)
+
+{
+    GtkRequisition requisition;
+    GdkRectangle   geometry;
+    GdkScreen     *widget_screen;
+    gint           x, y;
+
+    gdk_screen_get_monitor_geometry (screen, monitor, &geometry);
+
+    /*
+     * Getting a size request requires the widget
+     * to be associated with a screen, because font
+     * information may be needed (Olivier).
+     */
+    widget_screen = gtk_widget_get_screen (GTK_WIDGET (window));
+    if (screen != widget_screen)
+    {
+        gtk_window_set_screen (GTK_WINDOW (window), screen);
+    }
+    /*
+     * We need to be realized, otherwise we may get
+     * some odd side effects (Olivier).
+     */
+    if (!GTK_WIDGET_REALIZED (GTK_WIDGET (window)))
+    {
+        gtk_widget_realize (GTK_WIDGET (window));
+    }
+    /*
+     * Yes, I know -1 is useless here (Olivier).
+     */
+    requisition.width = requisition.height = -1;
+    gtk_widget_size_request (GTK_WIDGET (window), &requisition);
+
+    if( request_x < 0 )
+    {
+        x = geometry.x + (geometry.width - requisition.width) / 2;
+    }
+    else
+    {
+        x = geometry.x + request_x;
+    }
+
+    if( request_y < 0 )
+    {
+        y = geometry.y + (geometry.height - requisition.height - 200) / 2;
+    }
+    else
+    {
+        y = geometry.y + request_y;
+    }
+
+    gtk_window_move (window, x, y);
+}
+
+static void
+gmrun_gtk_window_place_at(GtkWindow *window,
+                        int request_x,
+                        int request_y,
+                        int centered_width = 0,
+                        int centered_height = 0,
+                        int on_active = 0)
+{
+    GdkScreen *screen = NULL;
+    gint       monitor = 0;
+
+    if(on_active != 0)
+    {
+        screen = gmrun_gdk_display_locate_monitor_with_pointer(NULL, &monitor);
+    }
+
+    if( screen == NULL )
+    {
+        screen = gdk_screen_get_default();
+        monitor = 0;
+    }
+
+    if(centered_width != 0)
+    {
+        request_x = -1;
+    }
+
+    if(centered_height != 0)
+    {
+        request_y = -1;
+    }
+
+    gmrun_gtk_window_place_on_monitor(window,
+                                      screen,
+                                      monitor,
+                                      request_x,
+                                      request_y);
+}
+
 int main(int argc, char **argv)
 {
   GtkWidget *win;
   GtkWidget *compline;
   GtkWidget *label_search;
   struct gigi g;
-  
+
 #ifdef MTRACE
   mtrace();
 #endif
@@ -621,11 +793,17 @@
   }
 
   gtk_box_pack_start(GTK_BOX(hbox), compline, TRUE, TRUE, 0);
-  
+
   int prefs_top = 80;
   int prefs_left = 100;
+  int prefs_centred_by_width = 0;
+  int prefs_centred_by_height = 0;
+  int prefs_use_active_monitor = 0;
   configuration.get_int("Top", prefs_top);
-  configuration.get_int("Left", prefs_left);  
+  configuration.get_int("Left", prefs_left);
+  configuration.get_int("CenteredByWidth", prefs_centred_by_width);
+  configuration.get_int("CenteredByHeight", prefs_centred_by_height);
+  configuration.get_int("UseActiveMonitor", prefs_use_active_monitor);
 
   // parse commandline options
   gboolean geo_parsed;
@@ -633,16 +811,16 @@
   char *geoptr;
   poptContext context;
   int option;
-  
+
   geoptr = geo_option;
-  
+
   struct poptOption options[] = {
     { "geometry", 'g', POPT_ARG_STRING | POPT_ARGFLAG_ONEDASH,
-      &geoptr, 0, "This option specifies the initial " 
+      &geoptr, 0, "This option specifies the initial "
       "size and location of the window.", NULL },
     POPT_AUTOHELP
-    { NULL, '\0', 0, NULL, 0 } 
-  };  
+    { NULL, '\0', 0, NULL, 0 }
+  };
 
   context = poptGetContext("popt1", argc, (const char**) argv, options, 0);
   option = poptGetNextOpt (context);
@@ -650,11 +828,16 @@
   if (strcmp (geoptr, ""))
   {
     geo_parsed = gtk_window_parse_geometry (GTK_WINDOW (win),
-					    geoptr);
+                        geoptr);
   }
   else
   {
-    gtk_widget_set_uposition(win, prefs_left, prefs_top);
+      gmrun_gtk_window_place_at(GTK_WINDOW(win),
+                                prefs_left,
+                                prefs_top,
+                                prefs_centred_by_width,
+                                prefs_centred_by_height,
+                                prefs_use_active_monitor);
   }
 
   gtk_widget_show(win);
--- gmrun-0.9.2.orig/config/gmrunrc
+++ gmrun-0.9.2/config/gmrunrc
@@ -11,6 +11,11 @@ AlwaysInTerm = ssh telnet ftp lynx mc vi vim pine centericq perldoc man
 Width = 400
 Top = 100
 Left = 200
+# Place window centered by the size of screen
+CenteredByWidth = 0
+CenteredByHeight = 0
+# Place window on active monitor
+UseActiveMonitor = 0
 
 # History size
 History = 256
